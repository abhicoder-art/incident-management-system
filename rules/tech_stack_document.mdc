# Technology Stack Documentation

## Frontend Stack

### Core Technologies
- **Framework**: React 18
- **Language**: TypeScript 5
- **Build Tool**: Vite
- **Package Manager**: npm

### UI Components
- **Styling**: Tailwind CSS
- **Icons**: Heroicons
- **Forms**: React Hook Form
- **Validation**: Zod

### State Management
- **Local State**: React Hooks
- **Server State**: React Query
- **Authentication**: Supabase Auth

### Routing
- **Router**: React Router v6
- **Navigation**: History API
- **Guards**: Protected Routes

### HTTP Client
- **Client**: Axios
- **Interceptors**: Request/Response
- **Error Handling**: Global Handler

## Backend Stack

### Core Technologies
- **Runtime**: Node.js
- **Framework**: Express.js
- **Language**: JavaScript
- **API**: REST

### Database
- **Provider**: Supabase
- **Type**: PostgreSQL
- **ORM**: Supabase Client
- **Migrations**: SQL Scripts

### Authentication
- **Provider**: Supabase Auth
- **Strategy**: JWT
- **Session**: Server-side
- **Security**: CORS, Helmet

### File Storage
- **Provider**: Supabase Storage
- **Types**: Images, Documents
- **Security**: Access Control

## Development Tools

### Code Quality
- **Linter**: ESLint
- **Formatter**: Prettier
- **Type Checking**: TypeScript
- **Git Hooks**: Husky

### Testing
- **Unit Tests**: Jest
- **Component Tests**: Testing Library
- **E2E Tests**: Cypress
- **API Tests**: Supertest

### Development
- **Editor**: VS Code
- **Extensions**:
  - ESLint
  - Prettier
  - Tailwind CSS IntelliSense
  - TypeScript
  - Git Lens

### Version Control
- **System**: Git
- **Platform**: GitHub
- **Flow**: Feature Branch
- **Reviews**: Pull Requests

## Infrastructure

### Hosting
- **Frontend**: Vercel/Netlify
- **Backend**: Heroku/Railway
- **Database**: Supabase Cloud

### CI/CD
- **Platform**: GitHub Actions
- **Steps**:
  - Build
  - Test
  - Lint
  - Deploy

### Monitoring
- **Logging**: Winston
- **Performance**: Lighthouse
- **Error Tracking**: Sentry
- **Analytics**: Supabase Analytics

## Dependencies

### Frontend Dependencies
```json
{
  "dependencies": {
    "@supabase/supabase-js": "^2.x",
    "axios": "^1.x",
    "react": "^18.x",
    "react-dom": "^18.x",
    "react-hook-form": "^7.x",
    "react-query": "^3.x",
    "react-router-dom": "^6.x",
    "tailwindcss": "^3.x",
    "zod": "^3.x"
  },
  "devDependencies": {
    "@types/react": "^18.x",
    "@typescript-eslint/eslint-plugin": "^5.x",
    "@vitejs/plugin-react": "^2.x",
    "eslint": "^8.x",
    "prettier": "^2.x",
    "typescript": "^4.x",
    "vite": "^3.x"
  }
}
```

### Backend Dependencies
```json
{
  "dependencies": {
    "@supabase/supabase-js": "^2.x",
    "cors": "^2.x",
    "dotenv": "^16.x",
    "express": "^4.x",
    "helmet": "^6.x",
    "winston": "^3.x"
  },
  "devDependencies": {
    "eslint": "^8.x",
    "jest": "^29.x",
    "nodemon": "^2.x",
    "supertest": "^6.x"
  }
}
```

## Environment Variables

### Frontend (.env)
```bash
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

### Backend (.env)
```bash
SUPABASE_URL=your_supabase_url
SUPABASE_SERVICE_KEY=your_supabase_service_key
PORT=3001
NODE_ENV=development
```

## API Endpoints

### Authentication
```typescript
POST /auth/login
POST /auth/register
POST /auth/logout
GET  /auth/session
```

### Incidents
```typescript
GET    /api/incidents
POST   /api/incidents
GET    /api/incidents/:id
PUT    /api/incidents/:id
DELETE /api/incidents/:id
```

## Database Schema

### Incidents Table
```sql
create table public.incidents (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  title text not null,
  description text not null,
  status text not null default 'Open',
  priority text not null default 'Medium',
  assigned_to text,
  resolution text
);
```

## Development Setup

### Prerequisites
- Node.js 16+
- npm 7+
- Git

### Installation
```bash
# Clone repository
git clone <repository-url>

# Install frontend dependencies
cd frontend
npm install

# Install backend dependencies
cd ../backend
npm install

# Set up environment variables
cp .env.example .env

# Start development servers
npm run dev
```

## Build & Deployment

### Frontend Build
```bash
# Production build
npm run build

# Preview build
npm run preview
```

### Backend Build
```bash
# Production build
npm run build

# Start production server
npm start
```

### Deployment Checklist
1. Update environment variables
2. Run database migrations
3. Build frontend assets
4. Deploy backend services
5. Update DNS records
6. Verify deployment
7. Monitor for errors 