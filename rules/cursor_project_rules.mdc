# Project Rules and Conventions

## Code Style Guidelines

### TypeScript/JavaScript
1. Use TypeScript for all new code
2. Follow ESLint configuration
3. Use functional components for React
4. Use hooks for state management
5. Use async/await for promises

### Naming Conventions
- **Files**: 
  - React Components: PascalCase (e.g., `IncidentList.tsx`)
  - Utilities: camelCase (e.g., `apiClient.ts`)
  - Constants: UPPER_SNAKE_CASE
- **Variables**: 
  - camelCase
  - Descriptive names
  - Boolean prefixed with is/has/should
- **Components**: PascalCase
- **Functions**: camelCase, verb prefixed
- **Interfaces**: PascalCase, prefixed with 'I' (optional)

### Component Structure
```typescript
// Imports
import React from 'react'
import { OtherDependencies } from 'package'

// Types/Interfaces
interface Props {
  // ...
}

// Component
export default function ComponentName({ prop1, prop2 }: Props) {
  // Hooks
  const [state, setState] = useState()
  
  // Effects
  useEffect(() => {
    // ...
  }, [])
  
  // Event Handlers
  const handleEvent = () => {
    // ...
  }
  
  // Render
  return (
    // JSX
  )
}
```

## Git Workflow

### Branch Naming
- feature/feature-name
- bugfix/bug-description
- hotfix/issue-description
- release/version-number

### Commit Messages
Format: `type(scope): message`

Types:
- feat: New feature
- fix: Bug fix
- docs: Documentation
- style: Formatting
- refactor: Code restructuring
- test: Adding tests
- chore: Maintenance

Example:
```
feat(incidents): add incident creation form
fix(auth): resolve login redirect issue
docs(api): update endpoint documentation
```

### Pull Requests
1. Keep PRs focused and small
2. Include description of changes
3. Reference related issues
4. Update documentation if needed
5. Ensure tests pass
6. Request review from team members

## Testing Guidelines

### Unit Tests
- Test components in isolation
- Mock external dependencies
- Focus on component logic
- Use React Testing Library
- Follow AAA pattern (Arrange, Act, Assert)

### Integration Tests
- Test component interactions
- Test API integration
- Use MSW for API mocking
- Test user workflows

### E2E Tests
- Test critical user paths
- Use Cypress for E2E testing
- Include authentication flows
- Test error scenarios

## Documentation

### Code Documentation
- Use JSDoc for function documentation
- Document complex logic
- Include type definitions
- Explain non-obvious solutions

### API Documentation
- Document all endpoints
- Include request/response examples
- Document error responses
- Keep OpenAPI/Swagger up to date

### Component Documentation
- Document props
- Include usage examples
- Document side effects
- Document dependencies

## Performance Guidelines

### React Best Practices
- Use memo for expensive renders
- Optimize useEffect dependencies
- Use lazy loading for routes
- Implement proper error boundaries

### API Optimization
- Implement proper caching
- Use pagination where appropriate
- Optimize database queries
- Monitor response times

### Build Optimization
- Optimize bundle size
- Use code splitting
- Implement proper tree shaking
- Monitor build metrics 