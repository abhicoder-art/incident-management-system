# Backend Structure Document

## Overview
This document outlines the structure and organization of the backend server for the Incident Management System.

## Server Architecture

### Technology Stack
- **Runtime**: Node.js
- **Framework**: Express.js
- **Database**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth

### Directory Structure
```
server/
├── node_modules/
├── .env                 # Environment variables
├── server.js           # Main application entry
├── package.json        # Dependencies and scripts
└── create_table.sql    # Database schema
```

## API Endpoints

### Authentication
Authentication is handled by Supabase Auth service.

### Incidents API

#### GET /api/incidents
- **Purpose**: Fetch all incidents
- **Auth**: Required
- **Response**: Array of incident objects
- **Sorting**: By creation date (descending)

#### GET /api/incidents/:id
- **Purpose**: Fetch single incident
- **Auth**: Required
- **Parameters**: id (incident ID)
- **Response**: Single incident object

#### POST /api/incidents
- **Purpose**: Create new incident
- **Auth**: Required
- **Body**:
  ```json
  {
    "title": "string (required)",
    "description": "string (required)",
    "status": "string (default: Open)",
    "priority": "string (default: Medium)",
    "assigned_to": "string (optional)",
    "resolution": "string (optional)"
  }
  ```

## Database Schema

### Incidents Table
```sql
create table public.incidents (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  title text not null,
  description text not null,
  status text not null default 'Open',
  priority text not null default 'Medium',
  assigned_to text,
  resolution text
);
```

## Security

### Row Level Security (RLS)
```sql
-- Enable RLS
alter table public.incidents enable row level security;

-- Read policy
create policy "Anyone can read incidents"
  on public.incidents for select
  using (true);

-- Insert policy
create policy "Anyone can insert incidents"
  on public.incidents for insert
  with check (true);

-- Update policy
create policy "Anyone can update incidents"
  on public.incidents for update
  using (true);
```

### Environment Variables
Required environment variables:
```
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key
PORT=3001 (optional, defaults to 3001)
```

## Error Handling

### HTTP Status Codes
- 200: Successful GET request
- 201: Successful POST request
- 400: Bad Request (invalid input)
- 401: Unauthorized
- 404: Resource not found
- 500: Server error

### Error Response Format
```json
{
  "error": "Error message",
  "details": "Detailed error description",
  "stack": "Stack trace (development only)"
}
```

## Logging
- Request logging: Method, URL, timestamp
- Response logging: Status code, response time
- Error logging: Full error details with stack trace
- Database query logging: Query execution time 